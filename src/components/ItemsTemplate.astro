---
/* ─────────── src/components/ItemsTemplate.astro ─────────── */
import Card from "./LoopComponents/Card.jsx";
import { queryItems } from "@/utils/CollectionQueryUtils.js";
import ClientItemsTemplate from "./ClientItemsTemplate.jsx";

const {
  /* incoming props */
  collection,
  query,
  items: initialItems,
  ItemComponent,            // function | string | { component, props }
  itemsClass = "",
  itemClass  = "",
  HasPage,
  pathname   = "",
  client,                   // "load" | "idle" | "visible" | undefined
  sortBy = "date",          // "date" | "title" | "slug" | "id"
  sortOrder = "desc",       // "asc" | "desc"
  manualOrder = false,      // if true, use item.data.order exclusively
  slider = { enabled: false },
  ...rest
} = Astro.props;

/* 1. Build‑time data */
let items = initialItems || [];
if (!initialItems && collection && query) {
  items = await queryItems(query, collection, pathname);
}

// ───── Apply sorting ─────
if (manualOrder) {
  items = [...items].sort((a, b) => (a.data.order || 0) - (b.data.order || 0));
} else {
  const sorted = [...items];
  if (sortBy === "title") {
    sorted.sort((a, b) =>
      String(a.data.title || a.slug).localeCompare(String(b.data.title || b.slug))
    );
  } else if (sortBy === "slug" || sortBy === "id") {
    sorted.sort((a, b) => String(a.slug).localeCompare(String(b.slug)));
  } else {
    sorted.sort((a, b) => {
      const da = new Date(a.data.pubDate || a.data.date || a._generatedAt || 0);
      const db = new Date(b.data.pubDate || b.data.date || b._generatedAt || 0);
      return da.getTime() - db.getTime();
    });
  }
  if (sortOrder === "desc") sorted.reverse();
  items = sorted;
}

/* 2. Server‑side dynamic import of your component */
import { basename } from "path";

let RenderComponent;
if (typeof ItemComponent === "string") {
  try {
    // try .jsx first
    const mod = await import(`./LoopComponents/${ItemComponent}.jsx`);
    RenderComponent = mod.default;
  } catch {
    // fallback to .astro
    const mod = await import(`./LoopComponents/${ItemComponent}.astro`);
    RenderComponent = mod.default;
  }
} else if (typeof ItemComponent === "object" && ItemComponent !== null) {
  RenderComponent = ItemComponent.component;
} else {
  RenderComponent = ItemComponent || Card;
}

/* 3. Serialisable key sent to the island */
let componentKey = "Card";
if (typeof ItemComponent === "string") {
  componentKey = ItemComponent;
} else if (typeof ItemComponent === "object" && ItemComponent !== null) {
  const comp = ItemComponent.component;
  componentKey = typeof comp === "string" ? comp : comp?.name || "Card";
} else if (typeof ItemComponent === "function") {
  componentKey = ItemComponent.name || "Card";
}
---

{items.length ? (
  <>
    {client === "load" && (
      <ClientItemsTemplate
        client:load
        items={items}
        componentKey={componentKey}
        itemsClass={itemsClass}
        itemClass={itemClass}
        collectionName={collection}
        HasPage={HasPage}
        slider={slider}
        {...rest}
      />
    )}

    {client === "visible" && (
      <ClientItemsTemplate
        client:visible
        items={items}
        componentKey={componentKey}
        itemsClass={itemsClass}
        itemClass={itemClass}
        collectionName={collection}
        HasPage={HasPage}
        slider={slider}
        {...rest}
      />
    )}

    {client === "idle" && (
      <ClientItemsTemplate
        client:idle
        items={items}
        componentKey={componentKey}
        itemsClass={itemsClass}
        itemClass={itemClass}
        collectionName={collection}
        HasPage={HasPage}
        slider={slider}
        {...rest}
      />
    )}

    {!client && (
      <ul class={itemsClass} {...rest}>
        {items.map((item) => (
         <li key={item.slug}>
            <RenderComponent
              item={item}
              class={itemClass}
              collectionName={collection}
              HasPage={HasPage}
            />
          </li>
        ))}
      </ul>
    )}
  </>
) : (
  <p>No items found.</p>
)}
