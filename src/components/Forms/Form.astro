---
/** Generic <Form> wrapper with built‑in consent checkbox
 *
 * Props
 * ─────────────────────────────────────────────────────────────
 * name                   – unique Netlify form name (default "generic-form")
 * method                 – HTTP method (default "post")
 * action                 – optional form action URL
 * formClass              – extra classes on the <form>
 * submitClass            – default Tailwind classes for the submit button
 * submitLabel            – text for the submit button (default "Submit")
 * enableSuccessBanner    – show JS success banner on submit?
 * successBannerMessage   – banner text
 * successBannerClass     – banner Tailwind classes
 *
 * new consent props
 * ─────────────────────────────────────────────────────────────
 * showConsent            – boolean: whether to include the consent checkbox (default true)
 * consentText            – main consent label text
 * consentLearnMoreLabel  – the link text ("Learn more")
 * consentLearnMoreUrl    – the URL for your privacy‑policy
 * consentWrapperClass    – classes for the consent container
 * consentInputClass      – classes for the checkbox input
 * consentLabelClass      – classes for the checkbox label
 *
 * Slots
 * ─────────────────────────────────────────────────────────────
 * default         – your form fields
 * submit          – optional custom submit button; if omitted we render a default
 */
import Button from "@/components/Button";
import { SiteData } from "@/content/SiteData";

const {
  name = "generic-form",
  method = "post",
  action,
  formClass = "",
  submitClass = "w-full mt-[var(--spacing-sm)] justify-center cursor-pointer",
  submitLabel = "Submit",
  enableSuccessBanner = false,
  successBannerMessage = "Thank you for your submission!",
  successBannerClass = "p-[var(--spacing-sm)] bg-primary text-bg border border-[var(--color-border)]",
  showConsent = true,
  consentText = `I consent to have ${SiteData.title} store my submitted information so they can respond`,
  consentLearnMoreLabel = "Learn more",
  consentLearnMoreUrl = "/privacy-policy",
  consentWrapperClass = "flex items-start text-left mb-[var(--spacing-md)]",
  consentInputClass = "mr-[var(--spacing-sm)] mt-[4px] w-4 h-4 accent-primary",
  consentLabelClass = "m-0",
} = Astro.props;
---

<form
  name={name}
  method={method}
  action={action}
  class={`w-full p-[var(--spacing-md)] ${formClass}`}
  data-success-banner={enableSuccessBanner}
  data-success-message={successBannerMessage}
  data-success-class={successBannerClass}
>
  <slot />

  {/** — inject required consent checkbox — */}
  {
    showConsent && (
      <div class={consentWrapperClass}>
        <input
          type="checkbox"
          id="consent"
          name="consent"
          required
          class={consentInputClass}
        />
        <label for="consent" class={consentLabelClass}>
          {consentText}&nbsp;
          <a href={consentLearnMoreUrl} class="underline">
            {consentLearnMoreLabel}
          </a>
        </label>
      </div>
    )
  }

  {
    Astro.slots.has("submit") ? (
      <slot name="submit" />
    ) : (
      <Button type="submit" variant="primary" className={submitClass}>
        {submitLabel}
      </Button>
    )
  }
</form>

<script is:inline>
  document.addEventListener("DOMContentLoaded", () => {
    document
      .querySelectorAll('form[data-success-banner="true"]')
      .forEach((form) => {
        form.addEventListener("submit", async (e) => {
          e.preventDefault();
          const data = new URLSearchParams(new FormData(form));

          let res;
          try {
            res = await fetch(form.action || "/", {
              method: form.method.toUpperCase(),
              headers: {
                "Content-Type": "application/x-www-form-urlencoded",
                "Accept": "application/json"
              },
              body: data.toString(),
            });
          } catch (networkErr) {
            console.error("Network error submitting form:", networkErr);
            return;
          }

          // hide the form in all cases
          form.style.display = "none";

          const banner = document.createElement("div");
          banner.className = form.dataset.successClass;

          if (res.ok) {
            // your custom success message
            banner.textContent = form.dataset.successMessage;
          } else {
            // try to pull an error out of the JSON, or fall back
            let errMsg = "There was a problem submitting the form.";
            try {
              const json = await res.json();
              if (json.error) errMsg = json.error;
            } catch {}
            banner.textContent = errMsg;
          }

          form.parentNode.insertBefore(banner, form.nextSibling);
        });
      });
  });
</script>

