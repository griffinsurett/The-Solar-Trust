---
// /[collection]/index.astro
import Section from "@/components/Section.astro";
import { collections } from "@/content/config";
import { getCollectionMeta } from "@/utils/FetchMeta";
import { capitalize } from "@/utils/ContentUtils";

export async function getStaticPaths() {
  const collectionNames = Object.keys(collections);
  const allPaths = [];
  for (const collName of collectionNames) {
    const meta = await getCollectionMeta(collName);
    if (meta.hasPage !== false) {
      allPaths.push({ params: { collection: collName } });
    }
  }
  return allPaths;
}

const { collection } = Astro.params;
const meta = await getCollectionMeta(collection).catch(() => ({}));

// 2) Choose layout relative spec
const spec = meta.layout || "../../layouts/ExtendedLayout.astro";

// 3) Globâ€‘register layouts
const layoutImporters = import.meta.glob("../../layouts/*.astro");

// 4) Load the selected layout
const importer = layoutImporters[spec];
if (!importer) {
  throw new Error(`Unknown layout specifier: ${spec}`);
}
const { default: Layout } = await importer();

// 5) Build sections
const sections = meta.sections?.length
  ? meta.sections
  : [
      {
        collection,
        query: "getAll",
        heading: { text: capitalize(collection), tagName: "h2" },
        description: meta.description,
      },
    ];

    console.log("robots", meta.robots);
---

<Layout
  collection={collection}
  title={capitalize(collection)}
  description={meta.description}
  keywords={meta.keywords}
  robots={meta.robots}
  ogType={meta.ogType}
>
  {
    sections.map((section, i) => (
      <Section
        key={i}
        variant={section.variant}
        collection={section.collection}
        query={section.query}
        heading={section.heading}
        buttons={section.buttons}
        description={section.description}
        descriptionClass={section.descriptionClass}
        sectionClass={section.sectionClass}
        contentClass={section.contentClass}
        itemsClass={section.itemsClass}
        itemClass={section.itemClass}
        buttonsSectionClass={section.buttonsSectionClass}
        headingAreaClass={section.headingAreaClass}
        {...section}
      />
    ))
  }
</Layout>
